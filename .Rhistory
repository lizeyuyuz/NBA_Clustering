colnames(player_stats_use) =
c("G","MP","FG","FGA","FGP","P2","P2A","PP2","P3","P3A","PP3","FT","FTA","FTP","TRB","AST","STL","BLK","TOV","PF","PTS", "#", "H", "P", "draft_class", "PER")
data <- player_stats_use[,-ncol(player_stats_use)]
data <- na.omit(data)
drop <- c("FGP", "PP2", "PP3", "FTP", "#", "H", "P", "draft_class")
data <- select(data, -one_of(drop))
# Chunk 4: pca_scree_biplot
pca <- princomp(data[,-1], cor=TRUE)
scree <- qplot(1:length(pca$sdev), pca$sdev^2/sum(pca$sdev^2), geom='line',
ylab='Component Variance', xlab='Component')
biplt <- ggbiplot(pca, alpha = 0.6)
# Chunk 5: pca_plots
grid.arrange(scree, biplt, ncol = 2)
# Chunk 6: cluster_input
data1_norm = scale(data)
dat_norm <- data1_norm
# Chunk 7: kpp_input
kpp_init = function(dat, K) {
x = as.matrix(dat)
n = nrow(x)
# Randomly choose a first center
centers = matrix(NA, nrow=K, ncol=ncol(x))
centers[1,] = as.matrix(x[sample(1:n, 1),])
for (k in 2:K) {
# Calculate dist^2 to closest center for each point
dists = matrix(NA, nrow=n, ncol=k-1)
for (j in 1:(k-1)) {
temp = sweep(x, 2, centers[j,], '-')
dists[,j] = rowSums(temp^2)
}
dists = rowMins(dists)
# Draw next center with probability propor to dist^2
cumdists = cumsum(dists)
prop = runif(1, min=0, max=cumdists[n])
centers[k,] = as.matrix(x[min(which(cumdists > prop)),])
}
return(centers)
}
# Chunk 8: kpp_output
set.seed(1290)
clust_kmeans = kmeans(data1_norm, kpp_init(data1_norm, 4), iter.max=100, algorithm='Lloyd')
kmeans_result = as.factor(clust_kmeans$cluster)
# Chunk 9: kpp_plot
set.seed(1290)
clust_kmeans_4 = kmeans(data1_norm, kpp_init(data1_norm, 4), iter.max=100, algorithm='Lloyd')
kmeans_result_4 = as.factor(clust_kmeans_4$cluster)
set.seed(1290)
clust_kmeans_5 = kmeans(data1_norm, kpp_init(data1_norm, 5), iter.max=100, algorithm='Lloyd')
kmeans_result_5 = as.factor(clust_kmeans_5$cluster)
plot_with_kmeans = function(data1_norm, kmeans_result_4, kmeans_result_5){
pca = princomp(data1_norm, cor=TRUE)
pca_temp = data.frame(pca$scores[,1],pca$scores[,2])
pca_temp = cbind(pca_temp, kmeans_result_4, kmeans_result_5)
names(pca_temp) = c('PC1', 'PC2', 'k-means (4 clusters)', 'k-means (5 clusters)')
pca_tempML = melt(pca_temp, id.vars=c('PC1', 'PC2'))
plot = ggplot(pca_tempML, aes(x=PC1, y=PC2, color=value)) +
geom_point() + facet_grid(~variable) + theme(legend.position='none')
plot
}
plot_with_kmeans(data1_norm, kmeans_result_4, kmeans_result_5)
# Chunk 10: kpp_elbow_plot
wss <- (nrow(data1_norm)-1)*sum(apply(data1_norm,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(data1_norm,centers=i)$withinss)
df = data.frame(variance = wss)
kpp_elbow_plot <- ggplot(df, aes(x = 1:15, y = variance))  +
geom_line(size=1) + labs(x = "model", y = "ss") + geom_point(size=3) +
xlab("Number of Clusters") + ylab("Within groups sum of squares")
# ggtitle("Assessing the Optimal Number of Clusters with the Elbow Method")
# Chunk 11: kpp_within_between_plot
kmeans_func = function(dat_norm,k){
clust_kmeans = kmeans(dat_norm, k)
return(c(clust_kmeans$tot.withinss, clust_kmeans$betweenss))
}
plot_kmeans_func = function(data, num_cluster){
ss = matrix(NA, num_cluster, ncol = 2)
for(k in 1:num_cluster){
ss[k,] = kmeans_func(data,k)
}
df_ss = data.frame(ss, 1:num_cluster)
colnames(df_ss) = c('withinss', 'betweenss', 'K')
dataL <- melt(df_ss, id="K")
ggplot(dataL, aes_string(x="K", y="value", colour="variable",
group="variable", linetype="variable", shape="variable")) +
geom_line(size=1) + labs(x = "Number of clusters",
y = "ss", colour="",group="", linetype="",shape="") +
geom_point(size=4) +
theme(legend.position=c(0.8,0.9),
legend.box = "horizontal",
legend.background = element_rect(fill = "transparent"))
}
kpp_within_between_plot <- plot_kmeans_func(data1_norm,6)
# Chunk 12: choose_kpp_k_plots_1
grid.arrange(kpp_elbow_plot, kpp_within_between_plot, ncol = 2)
# Chunk 13: kpp_silhouette_plot
dissE <- daisy(data1_norm)
dE2  <- dissE^2
sk2  <- silhouette(clust_kmeans$cl, dE2)
plot(sk2, main = "Silhouette plot of 4 clusters")
abline(v = mean(sk2[,"sil_width"]))
# Chunk 14: kpp_silhouette_line_plot
num_cluster = 6
ss = matrix(NA, num_cluster-1, ncol = 1)
for(k in 2:num_cluster){
clust_kmeans = kmeans(data1_norm, kpp_init(data1_norm, k), iter.max=100, algorithm='Lloyd')
dissE <- daisy(data1_norm)
dE2   <- dissE^2
sk2   <- silhouette(clust_kmeans$cluster, dE2)
ss[k-1] = mean(sk2[,"sil_width"])
}
df_ss = data.frame(ss, 2:num_cluster)
colnames(df_ss) = c('Silhouette', 'K')
dataL <- melt(df_ss, id="K")
kpp_silhouette_line_plot <- ggplot(dataL, aes_string(x="K", y="value", colour="variable", group="variable", linetype="variable", shape="variable")) +
geom_line(size=1) +
labs(x = "Number of clusters", y = "Silhouette", title = "Silhouette of Kmeans Clusters") +
geom_point(size=4) + theme(legend.position="none")
# kpp_silhouette_line_plot
# Chunk 15: stack_bar_fun
data_cluster = cbind(data, as.factor(clust_kmeans$cluster))
colnames(data_cluster)[ncol(data_cluster)] = c('cluster')
data_cluster$name = row.names(data_cluster)
stacked_bar_cluster = function(k, data_cluster, name_list){
`%notin%` <- Negate(`%in%`)
color_list = c("#800000", "#A52A2A", "#DC143C", "#FF0000",
"#FF6347","#FFA500","#FFD700", "#F0E68C","#FFFF44")
g = 20
df_all = data_cluster %>%
filter(cluster == k) %>%
select(TOV, TRB, BLK, STL, AST, P3, P3A, P2, P2A, name)
data_chose = df_all %>%
filter(name %in% name_list1)
data_rest = df_all %>%
filter(name %notin% name_list1)
n = g - nrow(data_chose)
df = rbind(data_chose, data_rest[1:n,])
dfML = melt(df, id.vars = "name")
stacked_bar = ggplot(data = dfML, aes(x = name, y = value, fill = variable)) +
geom_bar(stat="identity") +
scale_fill_manual(values= color_list) +
coord_flip() +
ggtitle(paste("cluster",k)) +
theme(legend.position="bottom",
legend.text = element_text(size = 5),
axis.title.x = element_blank(), # I tried to remove x.
axis.text.x = element_blank(), # If it is not good, plz add it back
axis.ticks.x = element_blank(),
axis.title.y = element_blank())
return(stacked_bar)
}
name_list1 <- c("Patrick patterson (PF)","Lance Stephenson (SG)","Kenneth Faried (PF)",
"Kawhi Leonard (SF)","Greg Monroe (PF/C)","Evan Turner (SG)",
"DeMarcus Cousins (PF/C)", "Al-Farouq Aminu (SF)","Julius Randle (PF)",
"Jabari Parker (SF/PF)","Anthony Bennett (SF/PF)",
"Andrew Wiggins (SF)","Jordan Clarkson (PG/SG)")
name_list2 <- c("Landry Fields (SF)","Dion Waiters (SG)","Cory Joseph (PG)",
"Chandler Parsons (SF)", "Zach LaVine (PG/SG)","Michael Carter-Williams (PG)")
name_list3 <- c("Jimmy Butler (SF)","Hassan Whiteside (C)","Draymond Green (SF/PF)",
"Andre Drummond (PF/C)","Victor Oladipo (SG/SF)","Karl-Anthony Towns (C)",
"Joel Embiid (C)")
name_list4 <- c("Tristan Thompson (PF)","Paul George (SF)","Kyrie Irving (PG)",
"Klay Thompson (SG/SF)","Kemba Walker (PG)","John Wall (PG)",
"Iman Shumpert (PG/SG)","Gordon Hayward (SF)","Eric Bledsoe (PG/SG)",
"Brandon Knight (PG/SG)","Reggie Jackson (PG/SG)","Norris Cole (PG)",
"Jeremy Lamb (SG)","Isaiah Thomas (PG)","Harrison Barnes (SF)",
"Damian Lillard (PG)","Bradley Beal (SG)","Austin Rivers (SG)",
"Tim Hardaway Jr (SG)","Ben McLemore (SG)")
g1 <- stacked_bar_cluster(1,data_cluster,name_list1)
g2 <- stacked_bar_cluster(2,data_cluster,name_list2)
g3 <- stacked_bar_cluster(3,data_cluster,name_list3)
g4 <- stacked_bar_cluster(4,data_cluster,name_list4)
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
mylegend<-g_legend(g1)
grid.arrange(arrangeGrob(g1 + theme(legend.position="none"),
g2 + theme(legend.position="none"),
g3 + theme(legend.position="none"),
g4 + theme(legend.position="none"),
ncol=2), mylegend, nrow=2,heights=c(10, 1))
# Chunk 16: radar_charts_fun
load("player_stats_use.rda")
# head(player_stats_use)
colnames(player_stats_use) =
c("G","MP","FG","FGA","FGP","P2","P2A","PP2","P3","P3A","PP3","FT","FTA","FTP","TRB","AST","STL","BLK","TOV","PF","PTS", "#", "H", "P", "draft_class", "PER")
data <- player_stats_use[,-ncol(player_stats_use)]
data <- na.omit(data)
drop <- c("FGP", "FTP", "#", "H", "P", "draft_class")
data <- select(data, -one_of(drop))
list1 = c("Andrew Wiggins","DeMarcus Cousins")
list2 = c("Chandler Parsons", "Michael Carter-Williams")
list3 = c("Draymond Green", "Jimmy Butler")
list4 = c("Kyrie Irving", "Klay Thompson")
radar_plot = function(player_list, data){
df = data
max = as.data.frame(t(apply(df, 2, max)))
max = max %>%
select(PF, AST, TRB, BLK, STL, TOV,FT, FG, PP3, PP2, PTS)
max = as.numeric(max)
for(player in player_list){
data$name = rownames(data)
p = data %>%
filter(name == player) %>%
select(PF, AST, TRB, BLK, STL, TOV,FT, FG, PP3, PP2 , PTS)
parameter_list = c("Fouls", "Assists", "Rebounds", "Blocks", "Steals", "Turnovers", "Free Throws", "Field Goals", "3-points Field Goals", "2-points Field Goals", "Points Per Game")
colnames(p) = parameter_list
plot = rbind(max, rep(0,11), p[1,])
radarchart(plot, axistype=1,
pcol=rgb(0,0.2,1,0.9) , pfcol=rgb(0,0.2,1,0.5) , plwd=4,
cglcol="grey", cglty=1, axislabcol="grey", cglwd=0.8,
vlcex=0.8, title = player)
}
}
# Chunk 17: radar_charts_plot1
radar_plot(list1, data)
# Chunk 18: radar_charts_plot2
radar_plot(list2, data)
# Chunk 19: radar_charts_plot3
radar_plot(list3, data)
# Chunk 20: radar_charts_plot4
radar_plot(list4, data)
# Chunk 21: guass_input
model = "EEE"
mclust = Mclust(data1_norm, control = emControl(itmax = c(10,10)), G = 4, modelNames = model)
clust_mclust = as.factor(mclust$classification)
# Chunk 22: gaussian_mixture_output
BIC = mclustBIC(data1_norm)
df_BIC = data.frame(BIC[,], cluster = row.names(BIC[,]))
dataL <- melt(df_BIC, id="cluster")
plot = ggplot(dataL, aes_string(x="cluster", y="value", colour="variable",
group="variable")) +
geom_line(size=0.4) + labs(x = "Number of Components",
y = "BIC", colour="", group="", linetype="",shape="") + geom_point(size=2, alpha = 0.6)
plot
plot_pca_name = function(data1_norm, clust, model){
pca = princomp(data1_norm, cor=TRUE)
pca_temp = data.frame(pca$scores[,1],pca$scores[,2])
pca_temp = cbind(pca_temp, clust)
names(pca_temp) = c('PC1', 'PC2', 'clust1')
pcaplot_name = ggplot(pca_temp, aes(x=PC1, y=PC2, color=clust1)) +
geom_point() + theme(legend.position="none")
# + ggtitle(paste("PCA, model =",model)) +
geom_label(aes(label = row.names(data1_norm)), size = 2)
pcaplot_name
}
guass_byname <- plot_pca_name(data1_norm, clust_mclust, model)
guass_byname
plot_pca_name = function(data1_norm, clust, model){
pca = princomp(data1_norm, cor=TRUE)
pca_temp = data.frame(pca$scores[,1],pca$scores[,2])
pca_temp = cbind(pca_temp, clust)
names(pca_temp) = c('PC1', 'PC2', 'clust1')
pcaplot_name = ggplot(pca_temp, aes(x=PC1, y=PC2, color=clust1)) +
geom_point() + theme(legend.position="none") +
# + ggtitle(paste("PCA, model =",model)) +
geom_label(aes(label = row.names(data1_norm)), size = 2)
pcaplot_name
}
guass_byname <- plot_pca_name(data1_norm, clust_mclust, model)
guass_byname
pca
loadings(pca)
loadings(pca)[,1:2]
pca_loadings_df <- (loadings(pca)[,1:2])
pca_loadings_df <- round((loadings(pca)[,1:2]), 4)
pca_loadings_df
names(pca_loadings_df) <- c("PC1", "PC2")
pca_loadings_df
colnames(pca_loadings_df) <- c("PC1", "PC2")
loadings(pca)[,1:2]
pca_loadings_df <- round((loadings(pca)[,1:2]), 4)
colnames(pca_loadings_df) <- c("PC1", "PC2")
pca_loadings_df
xtable(pca_loadings_df)
wss <- (nrow(data1_norm)-1)*sum(apply(data1_norm,2,var))
for (i in 2:15) wss[i] <- cumsum(kmeans(data1_norm,centers=i)$withinss)
df = data.frame(variance = wss)
kpp_elbow_plot <- ggplot(df, aes(x = 1:15, y = variance))  +
geom_line(size=1) + labs(x = "model", y = "ss") + geom_point(size=3) +
xlab("Number of Clusters") + ylab("Within groups sum of squares")
# ggtitle("Assessing the Optimal Number of Clusters with the Elbow Method")
kpp_elbow_plot
kmeans
?kmeans
wss <- (nrow(data1_norm)-1)*sum(apply(data1_norm,2,var))
for (i in 2:15) wss[i] <- cumsum(kmeans(data1_norm,centers=i)$withinss/kmeans(data1_norm,centers=i)$tot.withinss)
df = data.frame(variance = wss)
kpp_elbow_plot <- ggplot(df, aes(x = 1:15, y = variance))  +
geom_line(size=1) + labs(x = "model", y = "ss") + geom_point(size=3) +
xlab("Number of Clusters") + ylab("Within groups sum of squares")
# ggtitle("Assessing the Optimal Number of Clusters with the Elbow Method")
kpp_elbow_plot
kmeans_result
kmeans(data1_norm)
kmeans(data1_norm, center = 2)
wss <- (nrow(data1_norm)-1)*sum(apply(data1_norm,2,var))
for (i in 2:15) wss[i] <- cumsum(kmeans(data1_norm,centers=i)$betweenss/kmeans(data1_norm,centers=i)$totss)
df = data.frame(variance = wss)
kpp_elbow_plot <- ggplot(df, aes(x = 1:15, y = variance))  +
geom_line(size=1) + labs(x = "model", y = "ss") + geom_point(size=3) +
xlab("Number of Clusters") + ylab("Within groups sum of squares")
kpp_elbow_plot
wss <- (nrow(data1_norm)-1)*sum(apply(data1_norm,2,var))
wss <- (nrow(data1_norm)-1)*sum(apply(data1_norm,2,var))
for (i in 2:15) wss[i] <- kmeans(data1_norm,centers=i)$betweenss/kmeans(data1_norm,centers=i)$totss
df = data.frame(variance = wss)
df
kpp_elbow_plot <- ggplot(df, aes(x = 1:15, y = variance))  +
geom_line(size=1) + labs(x = "model", y = "ss") + geom_point(size=3) +
xlab("Number of Clusters") + ylab("Within groups sum of squares")
kpp_elbow_plot
df
wss <- (nrow(data1_norm)-1)*sum(apply(data1_norm,2,var))
for (i in 2:15) wss[i] <- kmeans(data1_norm,centers=i)$betweenss/kmeans(data1_norm,centers=i)$totss
df = data.frame(variance = wss)
df
wss <- (nrow(data1_norm)-1)*sum(apply(data1_norm,2,var))
for (i in 2:15) wss[i] <- kmeans(data1_norm,centers=i)$betweenss/kmeans(data1_norm,centers=i)$totss
df = data.frame(variance = wss)
kpp_elbow_plot <- ggplot(df, aes(x = 1:15, y = variance))  +
geom_line(size=1) + labs(x = "model", y = "ss") + geom_point(size=3) +
xlab("Number of Clusters") + ylab("Within groups sum of squares")
kpp_elbow_plot
wss <- (nrow(data1_norm)-1)*sum(apply(data1_norm,2,var))
for (i in 1:15) wss[i] <- kmeans(data1_norm,centers=i)$betweenss/kmeans(data1_norm,centers=i)$totss
df = data.frame(variance = wss)
df
wss <- (nrow(data1_norm)-1)*sum(apply(data1_norm,2,var))
for (i in 2:15) wss[i] <- kmeans(data1_norm,centers=i)$betweenss/kmeans(data1_norm,centers=i)$totss
df = data.frame(variance = wss)
kmeans(data1_norm,centers=2)$betweenss
kmeans(data1_norm,centers=2)$totss
kmeans(data1_norm,centers=2)$betweenss/kmeans(data1_norm,centers=2)$totss
wss <- (nrow(data1_norm)-1)*sum(apply(data1_norm,2,var))
for (i in 2:15) wss[i] <- kmeans(data1_norm,centers=i)$betweenss/kmeans(data1_norm,centers=i)$totss
df = data.frame(variance = wss)[,-1]
kpp_elbow_plot <- ggplot(df, aes(x = 1:15, y = variance))  +
geom_line(size=1) + labs(x = "model", y = "ss") + geom_point(size=3) +
xlab("Number of Clusters") + ylab("Within groups sum of squares")
kpp_elbow_plot
wss <- (nrow(data1_norm)-1)*sum(apply(data1_norm,2,var))
for (i in 2:15) wss[i] <- kmeans(data1_norm,centers=i)$betweenss/kmeans(data1_norm,centers=i)$totss
df = data.frame(variance = wss)
kpp_elbow_plot <- ggplot(df, aes(x = 2:15, y = variance))  +
geom_line(size=1) + labs(x = "model", y = "ss") + geom_point(size=3) +
xlab("Number of Clusters") + ylab("Within groups sum of squares")
# ggtitle("Assessing the Optimal Number of Clusters with the Elbow Method")
kpp_elbow_plot
wss <- (nrow(data1_norm)-1)*sum(apply(data1_norm,2,var))
for (i in 2:15) wss[i] <- kmeans(data1_norm,centers=i)$betweenss/kmeans(data1_norm,centers=i)$totss
df = data.frame(variance = wss)
df
df = data.frame(variance = wss)[-1,]
df
kpp_elbow_plot <- ggplot(df, aes(x = 1:15, y = variance))  +
geom_line(size=1) + labs(x = "model", y = "ss") + geom_point(size=3) +
xlab("Number of Clusters") + ylab("Within groups sum of squares")
kpp_elbow_plot
wss <- (nrow(data1_norm)-1)*sum(apply(data1_norm,2,var))
for (i in 2:15) wss[i] <- kmeans(data1_norm,centers=i)$betweenss/kmeans(data1_norm,centers=i)$totss
df = data.frame(variance = wss)[-1,]
df
wss <- (nrow(data1_norm)-1)*sum(apply(data1_norm,2,var))
for (i in 2:15) wss[i] <- kmeans(data1_norm,centers=i)$betweenss/kmeans(data1_norm,centers=i)$totss
df = data.frame(variance = wss)
df
df[-1,]
wss[-1]
wss <- (nrow(data1_norm)-1)*sum(apply(data1_norm,2,var))
for (i in 2:15) wss[i] <- kmeans(data1_norm,centers=i)$betweenss/kmeans(data1_norm,centers=i)$totss
df = data.frame(variance = wss[-1])
df
kpp_elbow_plot <- ggplot(df, aes(x = 1:15, y = variance))  +
geom_line(size=1) + labs(x = "model", y = "ss") + geom_point(size=3) +
xlab("Number of Clusters") + ylab("Within groups sum of squares")
kpp_elbow_plot
kpp_elbow_plot <- ggplot(df, aes(x = 1:14, y = variance))  +
geom_line(size=1) + labs(x = "model", y = "ss") + geom_point(size=3) +
xlab("Number of Clusters") + ylab("Within groups sum of squares")
kpp_elbow_plot
kmeans(data1_norm, centers = 2)
a <- kmeans(data1_norm, centers = 2)
a$withinss
a$betweenss
wss <- (nrow(data1_norm)-1)*sum(apply(data1_norm,2,var))
for (i in 2:15) wss[i] <- kmeans(data1_norm,centers=i)$betweenss/kmeans(data1_norm,centers=i)$totss
df = data.frame(variance = wss[-1])
kpp_elbow_plot <- ggplot(df, aes(x = 1:14, y = variance))  +
geom_line(size=1) + labs(x = "model", y = "ss") + geom_point(size=3) +
xlab("Number of Clusters") + ylab("Within groups sum of squares")
# ggtitle("Assessing the Optimal Number of Clusters with the Elbow Method")
kpp_elbow_plot
num_cluster = 15
ss = matrix(NA, num_cluster-1, ncol = 1)
for(k in 2:num_cluster){
clust_kmeans = kmeans(data1_norm, kpp_init(data1_norm, k), iter.max=100, algorithm='Lloyd')
dissE <- daisy(data1_norm)
dE2   <- dissE^2
sk2   <- silhouette(clust_kmeans$cluster, dE2)
ss[k-1] = mean(sk2[,"sil_width"])
}
df_ss = data.frame(ss, 2:num_cluster)
colnames(df_ss) = c('Silhouette', 'K')
dataL <- melt(df_ss, id="K")
kpp_silhouette_line_plot <- ggplot(dataL, aes_string(x="K", y="value", colour="variable", group="variable", linetype="variable", shape="variable")) +
geom_line(size=1) +
labs(x = "Number of clusters", y = "Average Silhouette Score") +
geom_point(size=4) + theme(legend.position="none")
kpp_silhouette_line_plot
num_cluster = 15
ss = matrix(NA, num_cluster-1, ncol = 1)
for(k in 2:num_cluster){
clust_kmeans = kmeans(data1_norm, kpp_init(data1_norm, k), iter.max=100, algorithm='Lloyd')
dissE <- daisy(data1_norm)
dE2   <- dissE^2
sk2   <- silhouette(clust_kmeans$cluster, dE2) * 100
ss[k-1] = mean(sk2[,"sil_width"])
}
df_ss = data.frame(ss, 2:num_cluster)
colnames(df_ss) = c('Silhouette', 'K')
dataL <- melt(df_ss, id="K")
kpp_silhouette_line_plot <- ggplot(dataL, aes_string(x="K", y="value", colour="variable", group="variable", linetype="variable", shape="variable")) +
geom_line(size=1) +
labs(x = "Number of clusters", y = "Average Silhouette Score") +
geom_point(size=4) + theme(legend.position="none")
kpp_silhouette_line_plot
clust_kmeans
dissE <- daisy(data1_norm)
dE2  <- dissE^2
clust_kmeans = kmeans(data1_norm, kpp_init(data1_norm, 4), iter.max=100, algorithm='Lloyd')
kmeans_result = as.factor(clust_kmeans$cluster)
sk2  <- silhouette(clust_kmeans$cl, dE2)
plot(sk2, main = "Silhouette plot of 4 clusters")
abline(v = mean(sk2[,"sil_width"]))
BIC
mclust = Mclust(data1_norm, control = emControl(itmax = c(10,10)), G = 4, modelNames = model)
clust_mclust = as.factor(mclust$classification)
mclust
clust_mclust
class(clust_mclust)
names(clust_mclust)
names(clust_mclust) == "Tim Hardaway Jr."
names(clust_mclust) == "Tim Hardaway Jr"
names(clust_mclust) == "Tim Hardaway Jr"
clust_mclust[146]
names(clust_mclust) == "Kyrie Irving"
which(names(clust_mclust) == "Kyrie Irving")
clust_mclust[46]
clust_mclust[which(names(clust_mclust) == "Eric Bledsoe")]
clust_mclust[which(names(clust_mclust) == "Bradley Beal")]
model_list = c("EVE", "VEE", "VVE", "EEE")
num_model = length(model_list)
ss = matrix(NA, num_model, ncol = 1)
k = 1
for(model in model_list){
mclust = Mclust(data1_norm, control = emControl(itmax = c(10,10)), G = 4, modelNames = model)
clust_mclust = as.matrix(mclust$classification)
dissE <- daisy(data1_norm)
dE2   <- dissE^2
sk2   <- silhouette(clust_mclust, dE2)
ss[k,] = mean(sk2[,"sil_width"])
print(model)
print(ss[k,])
k = k + 1
}
df_ss = data.frame(ss, model_list)
colnames(df_ss) = c('silhouette', 'model')
dataL <- melt(df_ss, id="model")
plot_gaus = ggplot(dataL, aes_string(x="model", y="value", colour="variable",
group="variable", linetype="variable", shape="variable")) +
geom_line(size=1) + labs(x = "model",
y = "ss",
colour="",group="",
linetype="",shape="") +
geom_point(size=4)
plot_gaus
ss
grid.arrange(kpp_elbow_plot, kpp_silhouette_line_plot, ncol = 2)
dissE <- daisy(data1_norm)
dE2  <- dissE^2
set.seed(1290)
clust_kmeans = kmeans(data1_norm, kpp_init(data1_norm, 4), iter.max=100, algorithm='Lloyd')
kmeans_result = as.factor(clust_kmeans$cluster)
sk2  <- silhouette(clust_kmeans$cl, dE2)
plot(sk2, main = " ")
abline(v = mean(sk2[,"sil_width"]))
install.packages('dplur')
install.packages('dplyr')
install.packages('fmsb')
install.packages("reshape2")
install.packages("ggplot2")
install.packages("gridExtra")
install.packages("matrixcalc")
install.packages(cluster)
install.packages("cluster")
install.packages("gridBase")
install.packages("mclust")
install.packages('stringr')
install.packages("stringr")
install.packages("matrixStats")
install.packages(HSAUR)
install.packages("HSAUR")
install.packages('knitr')
install.packages('ggbiplot')
install.packages(ggbiplot)
install.packages('ggbiplot')
library(devtools)
install_github("vqv/ggbiplot")
install.packages("devtools")
library("devtools")
install_github("vqv/ggbiplot")
